NAMES:
realmventure
townstarter
colonycorp
scaperealm
townworks
townorama

make actors part of a faction (player faction, visitor faction initially)
designate gathering spot for arriving visitors

prevent player control of visitors
right click visitor with citizen selected

put conversation topic in aitask instead of aistate? or both? 
	aitask is the right place for current task, aistate for pending conversation desires	
	unless, when i move to concurrent conversation, aitask will be irrelevant and it should be in aistate

issue when alt-targetting the back-faces of a block, towards the top of the texture

sell items (50% - 150% value when buying/selling)

behaviors should ideally accept a func as a target instead of just targetindex (for immutable targets that dont need to be stored in the task's target fields)
	or use some more targetindexes for common targets like actor's hauled object
replace vector3 with intvec3 in stockpile functions

//maybe
when instantiating behaviors, set a flag in them to make them increment the tasks wait/patience time? instead of just having the behaviorwait class hardcoded to do that


//next
GUI: growing zone gui
LOGIC: plants shouldn't have plant properties in their def. this doesnt allow for different plant entities to have different plantproperties
	put plantproperties inside their plantcomponent?
BUG: processing packets and clock outside of game speed, results in ticks being skipped at the client
	the server could send a start and end interaction in the same server tick, and while the server will actually have ticked the interaction
	the client will receive the start and end at the same tick without actually ticking
	SOLUTIONS:
	more packets with same data, or the same packets with larger data (<= this is what is currently happening but all messages in the packet
		share the server tick of the packet header, which leads to problems)?
	=>advance clock and send/receive packets inside the gamespeed tick loop
		(increased bandwidth)
		the sending of packets doesn't need to change. i can send all the messagees as one packet as is, but each message must have the 
		server clock prepended
	
	=>only increase clock and write the clock currenttick inside each message instead of in the packet header
		(same bandwidth, more work)
		
	ALSO: is it correct for client to handle packets BEFORE ticking, while the server sends packets AFTER ticking?
		probably yes because the important thing is that both advance the clock after sending/handling the packets

	not advancing the clock at all, messes up with player connection packets. i must use the map clock for synced packets
	
	can i repurpose the syncedpackets queue in the client class, while chancing clockadvancemtn on server and client to occur with map speed?
	repurpose the tick field in the packets to mean the map tick instead of the server/client tick?
	EVEN SO, the packet will only have the tick of whenever the batch of the packets were sent. 
	i need to separate ticks within the same packet, OR send multiple packets within the gamespeed influenced update loop

ESSENTIAL: create gui and packet to change growzone plant
ENGINE: network: change the objectevent packet to outgoingstream
	do i actually need it? in only seem to use it for the hitground event which the physics component essentially 
	sends to the mobilecomponent to reset the walk animation. why not do this automatically?
LOGIC: terrain manager: spawn wild grass too instead of letting grass propagate from grass blocks?
ENGINE: MOVE NETWORKOBJECTS from network to world
	save entities in map instead of chunks? 
LOGIC: instead of assinging individual facilities to workplaces, assign rooms to workplaces and let them detect facilities in the room
ENGINE: change behaviorperformtask execute return type to a struct that contains the exact behavior that failed
	maybe also add a field to the path class to store which behavior created it?
LOGIC: define bodyparts and itemparts and their materials separately from animation bones
	bind animation bones to defined bodyparts/itemparts to acquire material color
	primarymaterial: instead of it being the material of the root bone in the item's body, 
		the itemdef should define which bodypart to be considered as the primary material
	OR don't use primarymaterial at all? how?
LOGIC: interaction: merge interactiondigging and interactionmining

ENGINE: derive a new class from entity for items, and put getvalue only there?
LOGIC: when using -1 to denote a full stack, there might be issues where the stack size of the target item has increased since the
	beginning of the behavior/interaction until the handling of the item stack
LOGIC: customer must reserve shop counter when transacting, until i implement customer queues
LOGIC: designations: automatically designate chop down plants obstructing constructions and digging/mining designations
LOGIC: use a grass overlay for soil blocks instead of a separate grass block
LOGIC: ROOMS: prevent manually assigning room owner when room is assigned to a workplace?
ENGINE: either the blockentitiesbyposition dictionary shuold store only the center position of a multi blockentity 
	(because the other may bleed out to the neighboring chunks)
	or store blockentities in the map instead of in each individual chunk 
ENGINE: store references of everything in networkobjects? instead of just gameobjects?
LOGIC: WORKPLACES: instead of passing the customer to the task, have a customer queue in the workplace class and always handle the first customer
	have a separate queue for each workplace service? (bedroom renting in separate queue than dining)
	FIXED by storing the customer instanceid to a separate field in the task class
LOGIC: initialize/detect rooms at map creation/loading
	mark each cell as indoors/outdoors? floodfill when changing blocks?
LOGIC: cells discovered field in separate array instead of inside cell class?
GUI: better room selection
	do i actually need to select rooms?

LOGIC: having tools gives bonus lootchance to adventuring visitors? (axe increases loot chance for logs?)
	looting resources decreases durability of corresponding tool, when tool reaches 0 durability bonus stops being applied
	access preferred tool from itempreferences and defer bonus loot chance from its stats or value. cache the bonus
	increasing loot chance of one item doesn't make sense if it decreases chance of other items. instead of a loottable with distinct loot, decide each loot type independently

CONTENT: paperdoll
LOGIC: scraps: drop scraps when deconstructing or store and drop the actual used material?
LOGIC: dont have seperate classes for each workstation block, use the same blockworksation class for every workstation 
LOGIC: save actor customization
LOGIC: stockpile priorities/associate stockpiles with workstations
LOGIC: turn istorage to an actual class and put basic things like getgui() in there (because i want other containers to have storage settings too instead of just stockpiles)
	OR create a static function that creates istorages' gui
LOGIC: movement speed while crouching
LOGIC: conversations separately and concurrently
CONTENT: tavern prices
CONTENT: visitors help with town jobs for a reward
GUI: improve workplaces gui
LOGIC: citizens work in multiple workplaces or only at a single one? (in the first case, how to decide which workplace gets priority?)
CONTENT: durability/repairing
GUI: shop customers/orders gui
LOGIC: ****single itemdef for all tools/weapons/apparel
LOGIC: use decorator classes for ai inventory items for item roles (with fields such as: handled, junk, sell, keep, etc)
LOGIC: make a separate tick function for entities when they are at an offsitearea
LOGIC/GUI: instead of toggling materials for each itemdef seperately in craft orders, toggle materials globally for all itemdefs.
LOGIC: bulk crafting (not necessary, rimworld doesn't do it)
CONTENT: inn beds visitors
GRAPHICS: sweat particles when exhausted

AI: when job is disabled, the citizen either drops the tool from his inventory to the ground, or takes it out of the inventory and hauls it himself

LOGIC: maybe make attributes actual different classes instead of them having "progress awarder" components
GUI: resize tables (max visible items)
GUI: show total amount of materials required in tooltip when designating constructions

GUI: improve console window:
	instead of the logwindow writing to the underlying consolebox, write to the consolebox and fire up an event that the logwindow handles?

LOGIC: no need to have a seperate workerroledef class, use jobdef instead
GUI/ENGINE: when selecting multicell blocks (like construction designations and furniture), 
	use a new selection texture that shows the corners of the selected box

//not urgent
ENGINE: make placer classes for blocks. each blockclass will have a nested subclass that handles placing it. the placer constructor will accept
	parameters in human readable format, and translate them internally to bitvectors. the placer class will have a method "place" that
	applies stored bitvectors in the map grid. this way i wont have to worry about correct bitvector celldata format each time i place a block
ENGINE: remove Designation.Build and handle constructions as blockdesignations and blockconstructions explicitly in constructionmanager 
	because of multicelled constructions
	(the way i currently select the origin of multicelled blockdesignations in designationmanager is very hacky)
NETWORK: instead of sending different packet for orederedreliable and reliable, send both in one reliable packet and mark each packet segment as ordered or not?
LOGIC: toolspeed: change animation speed? or add some delay before restarting the animation?
GUI: Uiselectioninfo shouldn't be a control itself. make it a manager class

//bugs
fix At least one object must implement IComparable in function getstoragesbypriority in stockpilemanager
DONT SPAWN TREES IN DARKNESS
an iswalkablein cell might become !iswalkablein just before pathfinding to it. the result is that a path can't be found
undiscovered blocks become discovered if a block next to them changes (soil block became discovered after grass block above it became soil block by an entity walking on it)
WHEN AN ITEM IS PARTIALLY HAULED, REMOVE RESERVATION OF SOURCE STACK AFTER PICKING UP THE SPLIT STACK (done in behaviorhelper.startcarrying)
when searching to deliver material to constructions, prioritize constructions that are closer to being ready to be built (should be done by scanning constructions in order of being created, why doesnt it already happen?)
(taskgiverconstructing) when trybuild returns a haulaside task, dont search for a tool
(FIXED hackily)GRABTOOL behavior when already having the tool equipped, cause the actor to move one cell to the side for no reason (item is not on the ground, it's already equipped), 
and performs equip interaction which currently toggles the wielding of the item. resulting tin the item being actually unequipped